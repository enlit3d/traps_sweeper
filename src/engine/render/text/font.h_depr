#pragma once
#include "src/engine/data_types.h"
#include "src/engine/types/string.h"
#include "src/engine/render/texture/image_data.h"
#include <memory>

namespace engine::render {
	class Color;

	class FontSrc {
	public:
		FontSrc(str_ref filePath);
		~FontSrc();

		FontSrc(FontSrc&&) noexcept;
		FontSrc& operator=(FontSrc&&);
	private:
		friend class Font;
		struct Impl;
		std::unique_ptr<Impl> _impl;
	};

	class Font {
	public:
		using Letter = const char*;
		
	public:
		Font(const FontSrc& src, i32 pointSize = 32);
		Font(str_ref filePath, i32 pointSize = 32);
		Font(Font&&) noexcept;
		Font& operator=(Font&&);
		~Font();

		ImageData renderGlyph(Letter letter, const Color& color) const;

	private:
		struct Impl;
		std::unique_ptr<Impl> _impl;
	};
}